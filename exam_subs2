Assignment name  : aff_last_param
Expected files   : aff_last_param.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes strings as arguments, and displays its last
argument followed by a newline.

If the number of arguments is less than 1, the program displays a newline.

Examples:

$> ./aff_last_param "Zelda" "is" "a" "boy" | cat -e
boy$
$> ./aff_last_param 'I read this on internet !' | cat -e
I read this on internet !$
$> ./aff_last_param | cat -e
$
-e 

Assignment name  : aff_n
Expected files   : aff_n.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'n' character it
encounters in it, followed by a newline. If there are no 'n' characters in the
string, the program diplays 'n' followed by a newline. If the number of parameters is not
1, the program displays 'n' followed by a newline.

Example:

$> ./aff_n "abc" | cat -e
n$
$> ./aff_n 'RaInB0w d4Sh!' | cat -e
n$
$> ./aff_n 'ThE C4k3 Is a L|3' | cat -e
n$
$> ./aff_n 'C0cOnUt 0N th3 b3AcH' | cat -e
n$
$> ./aff_n | cat -e
n$
    -e 

Assignment name  : first_last_char
Expected files   : first_last_char.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string as argument and displays only the first
and last character of that string, followed by a newline.

If the string is empty or if the number of arguments is not 1, display only
a newline.

If the string has only one character, display that character twice.

Examples:

$> ./first_last_char "hello"
ho
$> ./first_last_char "world" | cat -e
wd$
$> ./first_last_char "a" | cat -e
aa$
$> ./first_last_char "" | cat -e
$
$> ./first_last_char | cat -e
$
-e 

Assignment name  : ft_putnbr
Expected files   : ft_putnbr.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------


Write a function that displays the number entered as a parameter. The function
has to be able to display all possible values within an int type variable.


Your function must be declared as follows:

void    ft_putnbr(int nb);
-e 

Assignment name  : ft_strlen
Expected files   : ft_strlen.c
Allowed functions: 
--------------------------------------------------------------------------------

Write a function that returns the length of a string.

Your function must be declared as follows:

int	ft_strlen(char *str);
-e 

Assignment name  : nth_char
Expected files   : nth_char.c
Allowed functions: write
--------------------------------------------------------------------------------
Write a function that takes two arguments: a string and a positive integer n.
The function should print every nth character from the string, starting from 
the nth position.

The input string will contain only printable ASCII characters.

If n is not a positive integer, print only a newline.
If the string is empty, print only a newline.
If n is greater than the string length, print only a newline.


Your function must be declared as follows:
		void print_nth_char(char *str, int n);

Examples:
int main(void)
{
    print_nth_char("ABCDEF", 2);    // prints "BDF\n"
    print_nth_char("PROGRAMMING", 3); // prints "OAI\n"
    print_nth_char("HELLOQUAD", 4);  // prints "LA\n"
    print_nth_char("ABC", 1);        // prints "ABC\n"
    print_nth_char("ABCDEF", 0);     // prints "\n"
    print_nth_char("", 2);           // prints "\n"
    return (0);
}
-e 

Assignment name  : rev_print
Expected files   : rev_print.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that print a string but in reverse order.
It must return its parameter.
Beware that the string wont be modifiable.
Your function must be declared as follows:

char    *rev_print(char *str);

Examples:

int	main(void)
{
	rev_print("rainbow dash");
	write(1, "\n", 1);
	rev_print("Ponies are awesome");
	write(1, "\n", 1);
	rev_print("");
	write(1, "\n", 1);
	return (0);
}

$> ./a.out | cat -e
hsad wobniar$
emosewa era seinoP$
$
$>
-e 

Assignment name  : rle
Expected files   : rle.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single string as an argument and applies a basic
run-length encoding algorithm.

The input string contains only uppercase letters (Aâ€“Z),
with no character repeated more than 9 times consecutively.

The RLE algorithm compresses sequences of the same character by replacing them
with the number of repetitions followed by the character.

If the string is empty or if the number of arguments is not 1, display a \n.

If a character appears once, don't print the count (just the character).

Examples:

$> ./rle "AAABBC" | cat -e
3A2BC$
$> ./rle "ABCD" | cat -e
ABCD$
$> ./rle "" | cat -e
$
$> ./rle | cat -e
$
Assignment name  : aff_first_param
Expected files   : aff_first_param.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes strings as arguments, and displays its first
argument followed by a \n.

If the number of arguments is less than 1, the program displays \n.

Example:

$> ./aff_first_param it is at this moment jackson knew | cat -e
it$
$> ./aff_first_param "I bet you can't print me" | cat -e
I bet you can't print me$
$> ./aff_first_param | cat -e
$
-e 

Assignment name  : aff_o
Expected files   : aff_o.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'o' character it
encounters in it, followed by a newline. If there are no 'o' characters in the
string, the program diplays 'o' followed by a newline. If the number of parameters is not
1, the program displays 'o' followed by a newline.

Example:

$> ./aff_o "abc" | cat -e
o$
$> ./aff_o 'RaInB0w d4Sh!' | cat -e
o$
$> ./aff_o 'ThE C4k3 Is a L|3' | cat -e
o$
$> ./aff_o 'C0cOnUt 0N th3 b3AcH' | cat -e
o$
$> ./aff_o | cat -e
o$
    -e 

Assignment name  : first_last_char
Expected files   : first_last_char.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string as argument and displays only the first
and last character of that string, followed by a newline.

If the string is empty or if the number of arguments is not 1, display only
a newline.

If the string has only one character, display that character twice.

Examples:

$> ./first_last_char "hello"
ho
$> ./first_last_char "world" | cat -e
wd$
$> ./first_last_char "a" | cat -e
aa$
$> ./first_last_char "" | cat -e
$
$> ./first_last_char | cat -e
$
-e 

Assignment name  : ft_putnbr
Expected files   : ft_putnbr.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------


Write a function that displays the number entered as a parameter. The function
has to be able to display all possible values within an int type variable.


Your function must be declared as follows:

void    ft_putnbr(int nb);
-e 

Assignment name  : ft_putstr
Expected files   : ft_putstr.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that displays a string on the standard output.

The pointer passed to the function contains the address of the string's first
character.

Your function must be declared as follows:

void	ft_putstr(char *str);
-e 

Assignment name  : last_word
Expected files   : last_word.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string and displays its last word followed by a \n.

A word is a section of string delimited by spaces/tabs or by the start/end of
the string.

If the number of parameters is not 1, or there are no words, display a newline.

Example:

$> ./last_word "FOR PONIES" | cat -e
PONIES$
$> ./last_word "this        ...       is sparta, then again, maybe    not" | cat -e
not$
$> ./last_word "   " | cat -e
$
$> ./last_word "a" "b" | cat -e
$
$> ./last_word "  lorem,ipsum  " | cat -e
lorem,ipsum$
$>
-e 

Assignment name  : nth_char
Expected files   : nth_char.c
Allowed functions: write
--------------------------------------------------------------------------------
Write a function that takes two arguments: a string and a positive integer n.
The function should print every nth character from the string, starting from 
the nth position.

The input string will contain only printable ASCII characters.

If n is not a positive integer, print only a newline.
If the string is empty, print only a newline.
If n is greater than the string length, print only a newline.


Your function must be declared as follows:
		void print_nth_char(char *str, int n);

Examples:
int main(void)
{
    print_nth_char("ABCDEF", 2);    // prints "BDF\n"
    print_nth_char("PROGRAMMING", 3); // prints "OAI\n"
    print_nth_char("HELLOQUAD", 4);  // prints "LA\n"
    print_nth_char("ABC", 1);        // prints "ABC\n"
    print_nth_char("ABCDEF", 0);     // prints "\n"
    print_nth_char("", 2);           // prints "\n"
    return (0);
}
-e 

Assignment name  : occ_a
Expected files   : occ_a.c
Allowed functions:
Version          : 1
--------------------------------------------------------------------------------

Write a function that return the number of occurence of the character 'A'
in the given string.

For example:
Hello World
0

ZzAaa
1

Your function must be declared as follows:

int     occ_a(char *str);
-e 

Assignment name  : rle
Expected files   : rle.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single string as an argument and applies a basic
run-length encoding algorithm.

The input string contains only uppercase letters (Aâ€“Z),
with no character repeated more than 9 times consecutively.

The RLE algorithm compresses sequences of the same character by replacing them
with the number of repetitions followed by the character.

If the string is empty or if the number of arguments is not 1, display a \n.

If a character appears once, don't print the count (just the character).

Examples:

$> ./rle "AAABBC" | cat -e
3A2BC$
$> ./rle "ABCD" | cat -e
ABCD$
$> ./rle "" | cat -e
$
$> ./rle | cat -e
$
Assignment name  : aff_last_param
Expected files   : aff_last_param.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes strings as arguments, and displays its last
argument followed by a newline.

If the number of arguments is less than 1, the program displays a newline.

Examples:

$> ./aff_last_param "Zelda" "is" "a" "boy" | cat -e
boy$
$> ./aff_last_param 'I read this on internet !' | cat -e
I read this on internet !$
$> ./aff_last_param | cat -e
$
-e 

Assignment name  : base16
Expected files   : base16.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single decimal number as argument and display its
base 16 representation to the standard output, followed by a \n.

The input will always be a valid positive integer or zero.
You must not handle invalid inputs (negative numbers, non-numeric characters).

If the number of arguments is not 1, the program displays a \n.

Base 16 uses the following symbols:
0 = 0, 1 = 1, 2 = 2, 3 = 3, 4 = 4, 5 = 5, 6 = 6, 7 = 7, 8 = 8, 9 = 9,
A = 10, B = 11, C = 12, D = 13, E = 14, F = 15

Base 16 conversion rules:
- Each position represents a power of 16 (rightmost is 16^0, next is 16^1, etc.)
- To convert from decimal: repeatedly divide by 16 and use remainders as digits
- Convert each remainder to its corresponding symbol (0-9 for 0-9, A-F for 10-15)

Examples:
$>./base16 "0" | cat -e
0$
$>./base16 "10" | cat -e
A$
$>./base16 "15" | cat -e
F$
$>./base16 "16" | cat -e
10$
$>./base16 "255" | cat -e
FF$
$>./base16 "256" | cat -e
100$
$>./base16 "3735928559" | cat -e
DEADBEEF$
$>./base16 | cat -e
$-e 

Assignment name  : count_alpha
Expected files   : count_alpha.c
Allowed functions: write, printf
--------------------------------------------------------------------------------

Write a program called count_alpha that takes a string and displays the number
of occurences of its alphabetical characters. Other characters are not counted.
The order is the order of occurence in the string. The display must be ended by
a newline.

The format is in the examples.

If the number of arguments is not 1, display only a newline.

Examples :
$> ./count_alpha abbcc
1a, 2b, 2c
$> ./count_alpha "abbcc"
1a, 2b, 2c
$> ./count_alpha "abbcc" "dddeef" | cat -e
$
$> ./count_alpha "My Hyze 47y 7." | cat -e
1m, 3y, 1h, 1z, 1e$
$> ./count_alpha "" | cat -e
$
-e 

Assignment name  : digit_sum
Expected files   : digit_sum.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single positive integer as a string argument and displays
the result of repeatedly summing its digits until only one digit remains to the
standard output, followed by a \n.

The input will always be a valid non-negative integer (no need to handle invalid
characters or negative values).

If the number of arguments is not 1, the program displays a \n.

Examples:
$>./digit_sum "0" | cat -e
0$
$>./digit_sum "1337" | cat -e
5$
$>./digit_sum "10" | cat -e
1$
$>./digit_sum "999" | cat -e
9$
$>./digit_sum "123" | cat -e
6$
$>./digit_sum "241" | cat -e
7$
$>./digit_sum "12" "34" "56" | cat -e
$
$>./digit_sum | cat -e
$
-e 

Assignment name  : ft_ft
Expected files   : ft_ft.c
Allowed functions: write
Version          : 1
--------------------------------------------------------------------------------

Write a program that display "42" followed by a newline (\n).

Example:

$>./ft_ft
42
$>./ft_ft | cat -e
42$
$>
-e 

Assignment name  : ft_list_remove_if
Expected files   : ft_list_remove_if.c
Allowed functions: free
--------------------------------------------------------------------------------

Write a function called ft_list_remove_if that removes from the
passed list any element the data of which is "equal" to the reference data.

It will be declared as follows :

void ft_list_remove_if(t_list **begin_list, void *data_ref, int (*cmp)());

cmp takes two void* and returns 0 when both parameters are equal.

You have to use the ft_list.h file, which will contain:

$>cat ft_list.h
typedef struct      s_list
{
    struct s_list   *next;
    void            *data;
}                   t_list;
$>
-e 

Assignment name  : ft_putnbr
Expected files   : ft_putnbr.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------


Write a function that displays the number entered as a parameter. The function
has to be able to display all possible values within an int type variable.


Your function must be declared as follows:

void    ft_putnbr(int nb);
-e 

Assignment name  : ft_rrange
Expected files   : ft_rrange.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write the following function:

int     *ft_rrange(int start, int end);

It must allocate (with malloc()) an array of integers, fill it with consecutive
values that begin at end and end at start (Including start and end !), then
return a pointer to the first value of the array.

Examples:

- With (1, 3) you will return an array containing 3, 2 and 1
- With (-1, 2) you will return an array containing 2, 1, 0 and -1.
- With (0, 0) you will return an array containing 0.
- With (0, -3) you will return an array containing -3, -2, -1 and 0.
-e 

Assignment name  : ft_split
Expected files   : ft_split.c
Allowed functions: malloc, free
--------------------------------------------------------------------------------

Write a function that takes a string, splits it into words, and returns them as
a NULL-terminated array of strings.

A "word" is defined as a part of a string delimited either by spaces/tabs/new
lines, or by the start/end of the string.

Your function must be declared as follows:

char    **ft_split(char *str);
-e 

Assignment name  : inter
Expected files   : inter.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes two strings and displays, without doubles, the
characters that appear in both strings, in the order they appear in the first
one.

The display will be followed by a \n.

If the number of arguments is not 2, the program displays \n.

Examples:

$>./inter "padinton" "paqefwtdjetyiytjneytjoeyjnejeyj" | cat -e
padinto$
$>./inter ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd | cat -e
df6ewg4$
$>./inter "nothing" "This sentence hides nothing" | cat -e
nothig$
$>./inter | cat -e
$
-e 

Assignment name  : nth_char
Expected files   : nth_char.c
Allowed functions: write
--------------------------------------------------------------------------------
Write a function that takes two arguments: a string and a positive integer n.
The function should print every nth character from the string, starting from 
the nth position.

The input string will contain only printable ASCII characters.

If n is not a positive integer, print only a newline.
If the string is empty, print only a newline.
If n is greater than the string length, print only a newline.


Your function must be declared as follows:
		void print_nth_char(char *str, int n);

Examples:
int main(void)
{
    print_nth_char("ABCDEF", 2);    // prints "BDF\n"
    print_nth_char("PROGRAMMING", 3); // prints "OAI\n"
    print_nth_char("HELLOQUAD", 4);  // prints "LA\n"
    print_nth_char("ABC", 1);        // prints "ABC\n"
    print_nth_char("ABCDEF", 0);     // prints "\n"
    print_nth_char("", 2);           // prints "\n"
    return (0);
}
-e 

Assignment name  : occ_z
Expected files   : occ_z.c
Allowed functions:
Version          : 1
--------------------------------------------------------------------------------

Write a function that return the number of occurence of the character 'Z'
in the given string.


For example:
XxxxYyy
0

XxZZyZ
3

Your function must be declared as follows:

int     occ_z(char *str);


-e 

Assignment name  : odd
Expected files   : odd.c
Allowed functions: write
Version          : 1
--------------------------------------------------------------------------------

Write a program that display all odd digits from 0 to 10, followed by a
newline '\n'.

Example:
$> ./odd
13579
$> ./odd | cat -e
13579$
$>
-e 

Assignment name  : pingpong
Expected files   : pingpong.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that takes an integer between 1 and 1000, and displays the appropriate output as in the example.

Your function must be declared as follows:

void	pingpong(int n);

If the number is a multiple of 3, it displays 'ping' followed by a newline.

If the number is a multiple of 5, it displays 'pong' followed by a newline.

If the number is both a multiple of 3 and a multiple of 5, it displays 'pingpong' followed by a newline.

If the number is not a multiple of 3 or 5, it displays the number followed by a newline.
Examples: 

int	main(void)
{
	pingpong(1); // 1
	pingpong(3); // ping
	pingpong(5); // pong
	pingpong(15); // pingpong
	pingpong(999); // ping
	pingpong(998); // 998
	return (0);
}-e 

Assignment name  : str_maxlenoc
Expected files   : str_maxlenoc.c
Allowed functions: write, malloc, free
--------------------------------------------------------------------------------

Write a program that takes one or more strings and displays, followed by a
newline, the longest string that appears in every parameter. If more that one
string qualifies, it will display the one that appears first in the first
parameter. Note that the empty string technically appears in any string.

If there are no parameters, the program displays \n.

Examples:

$>./str_maxlenoc ab bac abacabccabcb
a
$>./str_maxlenoc bonjour salut bonjour bonjour
u
$>./str_maxlenoc xoxAoxo xoxAox  oxAox oxo  A ooxAoxx oxooxo Axo | cat -e
$
$>./str_maxlenoc bosdsdfnjodur atehhellosd afkuonjosurafg headfgllosf fghellosag afdfbosnjourafg
os
$>./str_maxlenoc | cat -e
$


Assignment name  : aff_j
Expected files   : aff_j.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'j' character it
encounters in it, followed by a newline. If there are no 'j' characters in the
string, the program diplays 'j' followed by a newline. If the number of parameters is not
1, the program displays 'j' followed by a newline.

Example:

$> ./aff_j "abc" | cat -e
j$
$> ./aff_j 'RaInB0w d4Sh!' | cat -e
j$
$> ./aff_j 'ThE C4k3 Is a L|3' | cat -e
j$
$> ./aff_j 'C0cOnUt 0N th3 b3AcH' | cat -e
j$
$> ./aff_j | cat -e
j$
    -e 

Assignment name  : aff_last_param
Expected files   : aff_last_param.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes strings as arguments, and displays its last
argument followed by a newline.

If the number of arguments is less than 1, the program displays a newline.

Examples:

$> ./aff_last_param "Zelda" "is" "a" "boy" | cat -e
boy$
$> ./aff_last_param 'I read this on internet !' | cat -e
I read this on internet !$
$> ./aff_last_param | cat -e
$
-e 

Assignment name  : base16
Expected files   : base16.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single decimal number as argument and display its
base 16 representation to the standard output, followed by a \n.

The input will always be a valid positive integer or zero.
You must not handle invalid inputs (negative numbers, non-numeric characters).

If the number of arguments is not 1, the program displays a \n.

Base 16 uses the following symbols:
0 = 0, 1 = 1, 2 = 2, 3 = 3, 4 = 4, 5 = 5, 6 = 6, 7 = 7, 8 = 8, 9 = 9,
A = 10, B = 11, C = 12, D = 13, E = 14, F = 15

Base 16 conversion rules:
- Each position represents a power of 16 (rightmost is 16^0, next is 16^1, etc.)
- To convert from decimal: repeatedly divide by 16 and use remainders as digits
- Convert each remainder to its corresponding symbol (0-9 for 0-9, A-F for 10-15)

Examples:
$>./base16 "0" | cat -e
0$
$>./base16 "10" | cat -e
A$
$>./base16 "15" | cat -e
F$
$>./base16 "16" | cat -e
10$
$>./base16 "255" | cat -e
FF$
$>./base16 "256" | cat -e
100$
$>./base16 "3735928559" | cat -e
DEADBEEF$
$>./base16 | cat -e
$-e 

Assignment name  : count_letters
Expected files   : count_letters.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string and counts the number of alphabetical characters (a-z, A-Z) in it. 

Your program should display the number followed by a \n.

If the string is empty or if the number of arguments is not 1, display a \n.

Example : 

$> ./count_letters "Hello World"
10$
$> ./count_letters "H3ll0 W0rld" | cat -e
7$
$> ./count_letters "" | cat -e
$
$> ./count_letters "1337" | cat -e
0$
-e 

Assignment name  : ft_putnbr
Expected files   : ft_putnbr.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------


Write a function that displays the number entered as a parameter. The function
has to be able to display all possible values within an int type variable.


Your function must be declared as follows:

void    ft_putnbr(int nb);
-e 

Assignment name  : ft_strlen
Expected files   : ft_strlen.c
Allowed functions: 
--------------------------------------------------------------------------------

Write a function that returns the length of a string.

Your function must be declared as follows:

int	ft_strlen(char *str);
-e 

Assignment name  : maff_alpha
Expected files   : maff_alpha.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays the alphabet, with even letters in uppercase, and
odd letters in lowercase, followed by a newline.

Example:

$> ./maff_alpha | cat -e
aBcDeFgHiJkLmNoPqRsTuVwXyZ$
-e 

Assignment name  : nth_char
Expected files   : nth_char.c
Allowed functions: write
--------------------------------------------------------------------------------
Write a function that takes two arguments: a string and a positive integer n.
The function should print every nth character from the string, starting from 
the nth position.

The input string will contain only printable ASCII characters.

If n is not a positive integer, print only a newline.
If the string is empty, print only a newline.
If n is greater than the string length, print only a newline.


Your function must be declared as follows:
		void print_nth_char(char *str, int n);

Examples:
int main(void)
{
    print_nth_char("ABCDEF", 2);    // prints "BDF\n"
    print_nth_char("PROGRAMMING", 3); // prints "OAI\n"
    print_nth_char("HELLOQUAD", 4);  // prints "LA\n"
    print_nth_char("ABC", 1);        // prints "ABC\n"
    print_nth_char("ABCDEF", 0);     // prints "\n"
    print_nth_char("", 2);           // prints "\n"
    return (0);
}
-e 

Assignment name  : rle
Expected files   : rle.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single string as an argument and applies a basic
run-length encoding algorithm.

The input string contains only uppercase letters (Aâ€“Z),
with no character repeated more than 9 times consecutively.

The RLE algorithm compresses sequences of the same character by replacing them
with the number of repetitions followed by the character.

If the string is empty or if the number of arguments is not 1, display a \n.

If a character appears once, don't print the count (just the character).

Examples:

$> ./rle "AAABBC" | cat -e
3A2BC$
$> ./rle "ABCD" | cat -e
ABCD$
$> ./rle "" | cat -e
$
$> ./rle | cat -e
$
-e 

Assignment name  : search_and_replace
Expected files   : search_and_replace.c
Allowed functions: write, exit
Version          : 1
--------------------------------------------------------------------------------

Write a program called search_and_replace that takes 3 arguments, the first 
arguments is a string in which to replace a letter (2nd argument) by
another one (3rd argument).

If the number of arguments is not 3, or if the argument #2 and #3 aren't strings composed of only one character, just display a newline.

If the second argument is not contained in the first one (the string)
then the program simply rewrites the string followed by a newline.

Examples:
$>./search_and_replace "My life for Aizr" "z" "u"
My life for Aiur
$>./search_and_replace "gaetan" "art" "zul" | cat -e
$
$>./search_and_replace "ol is at home" "ol" "w" | cat -e
$
$>./search_and_replace "zaz" "r" "u" | cat -e
zaz$
$>./search_and_replace "jacob" "a" "b" "c" "e" | cat -e
$
$>./search_and_replace "In foct, stoff crew ore very nice. They like metol." "o" "a" | cat -e
In fact, staff crew are very nice. They like metal.$


Assignment name  : aff_first_param
Expected files   : aff_first_param.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes strings as arguments, and displays its first
argument followed by a \n.

If the number of arguments is less than 1, the program displays \n.

Example:

$> ./aff_first_param it is at this moment jackson knew | cat -e
it$
$> ./aff_first_param "I bet you can't print me" | cat -e
I bet you can't print me$
$> ./aff_first_param | cat -e
$
-e 

Assignment name  : aff_i
Expected files   : aff_i.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'i' character it
encounters in it, followed by a newline. If there are no 'i' characters in the
string, the program diplays 'i' followed by a newline. If the number of parameters is not
1, the program displays 'i' followed by a newline.

Example:

$> ./aff_i "abc" | cat -e
i$
$> ./aff_i 'RaInB0w d4Sh!' | cat -e
i$
$> ./aff_i 'ThE C4k3 Is a L|3' | cat -e
i$
$> ./aff_i 'C0cOnUt 0N th3 b3AcH' | cat -e
i$
$> ./aff_i | cat -e
i$
    -e 

Assignment name  : digit_sum
Expected files   : digit_sum.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single positive integer as a string argument and displays
the result of repeatedly summing its digits until only one digit remains to the
standard output, followed by a \n.

The input will always be a valid non-negative integer (no need to handle invalid
characters or negative values).

If the number of arguments is not 1, the program displays a \n.

Examples:
$>./digit_sum "0" | cat -e
0$
$>./digit_sum "1337" | cat -e
5$
$>./digit_sum "10" | cat -e
1$
$>./digit_sum "999" | cat -e
9$
$>./digit_sum "123" | cat -e
6$
$>./digit_sum "241" | cat -e
7$
$>./digit_sum "12" "34" "56" | cat -e
$
$>./digit_sum | cat -e
$
-e 

Assignment name  : first_last_char
Expected files   : first_last_char.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string as argument and displays only the first
and last character of that string, followed by a newline.

If the string is empty or if the number of arguments is not 1, display only
a newline.

If the string has only one character, display that character twice.

Examples:

$> ./first_last_char "hello"
ho
$> ./first_last_char "world" | cat -e
wd$
$> ./first_last_char "a" | cat -e
aa$
$> ./first_last_char "" | cat -e
$
$> ./first_last_char | cat -e
$
-e 

Assignment name  : ft_putnbr
Expected files   : ft_putnbr.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------


Write a function that displays the number entered as a parameter. The function
has to be able to display all possible values within an int type variable.


Your function must be declared as follows:

void    ft_putnbr(int nb);
-e 

Assignment name  : maff_revalpha
Expected files   : maff_revalpha.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays the alphabet in reverse, with even letters in
uppercase, and odd letters in lowercase, followed by a newline.

Example:

$> ./maff_revalpha | cat -e
zYxWvUtSrQpOnMlKjIhGfEdCbA$
-e 

Assignment name  : nth_char
Expected files   : nth_char.c
Allowed functions: write
--------------------------------------------------------------------------------
Write a function that takes two arguments: a string and a positive integer n.
The function should print every nth character from the string, starting from 
the nth position.

The input string will contain only printable ASCII characters.

If n is not a positive integer, print only a newline.
If the string is empty, print only a newline.
If n is greater than the string length, print only a newline.


Your function must be declared as follows:
		void print_nth_char(char *str, int n);

Examples:
int main(void)
{
    print_nth_char("ABCDEF", 2);    // prints "BDF\n"
    print_nth_char("PROGRAMMING", 3); // prints "OAI\n"
    print_nth_char("HELLOQUAD", 4);  // prints "LA\n"
    print_nth_char("ABC", 1);        // prints "ABC\n"
    print_nth_char("ABCDEF", 0);     // prints "\n"
    print_nth_char("", 2);           // prints "\n"
    return (0);
}
-e 

Assignment name  : occ_z
Expected files   : occ_z.c
Allowed functions:
Version          : 1
--------------------------------------------------------------------------------

Write a function that return the number of occurence of the character 'Z'
in the given string.


For example:
XxxxYyy
0

XxZZyZ
3

Your function must be declared as follows:

int     occ_z(char *str);

Assignment name  : aff_y
Expected files   : aff_y.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'y' character it
encounters in it, followed by a newline. If there are no 'y' characters in the
string, the program diplays 'y' followed by a newline. If the number of parameters is not
1, the program displays 'y' followed by a newline.

Example:

$> ./aff_y "abc" | cat -e
y$
$> ./aff_y 'RaInB0w d4Sh!' | cat -e
y$
$> ./aff_y 'ThE C4k3 Is a L|3' | cat -e
y$
$> ./aff_y 'C0cOnUt 0N th3 b3AcH' | cat -e
y$
$> ./aff_y | cat -e
y$
    -e 

Assignment name  : count_len
Expected files   : count_len.c
Allowed functions:
Version          : 1
--------------------------------------------------------------------------------

Write a function that return the length of a string.

Your function must be declared as follows:

int count_len(char *str);

-e 

Assignment name  : maff_revalpha
Expected files   : maff_revalpha.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays the alphabet in reverse, with even letters in
uppercase, and odd letters in lowercase, followed by a newline.

Example:

$> ./maff_revalpha | cat -e
zYxWvUtSrQpOnMlKjIhGfEdCbA$
-e 

Assignment name  : nth_char
Expected files   : nth_char.c
Allowed functions: write
--------------------------------------------------------------------------------
Write a function that takes two arguments: a string and a positive integer n.
The function should print every nth character from the string, starting from 
the nth position.

The input string will contain only printable ASCII characters.

If n is not a positive integer, print only a newline.
If the string is empty, print only a newline.
If n is greater than the string length, print only a newline.


Your function must be declared as follows:
		void print_nth_char(char *str, int n);

Examples:
int main(void)
{
    print_nth_char("ABCDEF", 2);    // prints "BDF\n"
    print_nth_char("PROGRAMMING", 3); // prints "OAI\n"
    print_nth_char("HELLOQUAD", 4);  // prints "LA\n"
    print_nth_char("ABC", 1);        // prints "ABC\n"
    print_nth_char("ABCDEF", 0);     // prints "\n"
    print_nth_char("", 2);           // prints "\n"
    return (0);
}

Assignment name  : aff_x
Expected files   : aff_x.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'x' character it
encounters in it, followed by a newline. If there are no 'x' characters in the
string, the program diplays 'x' followed by a newline. If the number of parameters is not
1, the program displays 'x' followed by a newline.

Example:

$> ./aff_x "abc" | cat -e
x$
$> ./aff_x 'RaInB0w d4Sh!' | cat -e
x$
$> ./aff_x 'ThE C4k3 Is a L|3' | cat -e
x$
$> ./aff_x 'C0cOnUt 0N th3 b3AcH' | cat -e
x$
$> ./aff_x | cat -e
x$
    -e 

Assignment name  : ft_strlen
Expected files   : ft_strlen.c
Allowed functions: 
--------------------------------------------------------------------------------

Write a function that returns the length of a string.

Your function must be declared as follows:

int	ft_strlen(char *str);
-e 

Assignment name  : nth_char
Expected files   : nth_char.c
Allowed functions: write
--------------------------------------------------------------------------------
Write a function that takes two arguments: a string and a positive integer n.
The function should print every nth character from the string, starting from 
the nth position.

The input string will contain only printable ASCII characters.

If n is not a positive integer, print only a newline.
If the string is empty, print only a newline.
If n is greater than the string length, print only a newline.


Your function must be declared as follows:
		void print_nth_char(char *str, int n);

Examples:
int main(void)
{
    print_nth_char("ABCDEF", 2);    // prints "BDF\n"
    print_nth_char("PROGRAMMING", 3); // prints "OAI\n"
    print_nth_char("HELLOQUAD", 4);  // prints "LA\n"
    print_nth_char("ABC", 1);        // prints "ABC\n"
    print_nth_char("ABCDEF", 0);     // prints "\n"
    print_nth_char("", 2);           // prints "\n"
    return (0);
}
-e 

Assignment name  : odd
Expected files   : odd.c
Allowed functions: write
Version          : 1
--------------------------------------------------------------------------------

Write a program that display all odd digits from 0 to 10, followed by a
newline '\n'.

Example:
$> ./odd
13579
$> ./odd | cat -e
13579$
$>
-e 

Assignment name  : rle
Expected files   : rle.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single string as an argument and applies a basic
run-length encoding algorithm.

The input string contains only uppercase letters (Aâ€“Z),
with no character repeated more than 9 times consecutively.

The RLE algorithm compresses sequences of the same character by replacing them

Assignment name  : aff_first_param
Expected files   : aff_first_param.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes strings as arguments, and displays its first
argument followed by a \n.

If the number of arguments is less than 1, the program displays \n.

Example:

$> ./aff_first_param it is at this moment jackson knew | cat -e
it$
$> ./aff_first_param "I bet you can't print me" | cat -e
I bet you can't print me$
$> ./aff_first_param | cat -e
$
-e 

Assignment name  : aff_p
Expected files   : aff_p.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'p' character it
encounters in it, followed by a newline. If there are no 'p' characters in the
string, the program diplays 'p' followed by a newline. If the number of parameters is not
1, the program displays 'p' followed by a newline.

Example:

$> ./aff_p "abc" | cat -e
p$
$> ./aff_p 'RaInB0w d4Sh!' | cat -e
p$
$> ./aff_p 'ThE C4k3 Is a L|3' | cat -e
p$
$> ./aff_p 'C0cOnUt 0N th3 b3AcH' | cat -e
p$
$> ./aff_p | cat -e
p$
    -e 

Assignment name  : base16
Expected files   : base16.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single decimal number as argument and display its
base 16 representation to the standard output, followed by a \n.

The input will always be a valid positive integer or zero.
You must not handle invalid inputs (negative numbers, non-numeric characters).

If the number of arguments is not 1, the program displays a \n.

Base 16 uses the following symbols:
0 = 0, 1 = 1, 2 = 2, 3 = 3, 4 = 4, 5 = 5, 6 = 6, 7 = 7, 8 = 8, 9 = 9,
A = 10, B = 11, C = 12, D = 13, E = 14, F = 15

Base 16 conversion rules:
- Each position represents a power of 16 (rightmost is 16^0, next is 16^1, etc.)
- To convert from decimal: repeatedly divide by 16 and use remainders as digits
- Convert each remainder to its corresponding symbol (0-9 for 0-9, A-F for 10-15)

Examples:
$>./base16 "0" | cat -e
0$
$>./base16 "10" | cat -e
A$
$>./base16 "15" | cat -e
F$
$>./base16 "16" | cat -e
10$
$>./base16 "255" | cat -e
FF$
$>./base16 "256" | cat -e
100$
$>./base16 "3735928559" | cat -e
DEADBEEF$
$>./base16 | cat -e
$-e 

Assignment name  : count_len
Expected files   : count_len.c
Allowed functions:
Version          : 1
--------------------------------------------------------------------------------

Write a function that return the length of a string.

Your function must be declared as follows:

int count_len(char *str);

-e 

Assignment name  : ft_itoa
Expected files   : ft_itoa.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write a function that takes an int and converts it to a null-terminated string.
The function returns the result in a char array that you must allocate.

Your function must be declared as follows:

char	*ft_itoa(int nbr);
-e 

Assignment name  : ft_list_remove_if
Expected files   : ft_list_remove_if.c
Allowed functions: free
--------------------------------------------------------------------------------

Write a function called ft_list_remove_if that removes from the
passed list any element the data of which is "equal" to the reference data.

It will be declared as follows :

void ft_list_remove_if(t_list **begin_list, void *data_ref, int (*cmp)());

cmp takes two void* and returns 0 when both parameters are equal.

You have to use the ft_list.h file, which will contain:

$>cat ft_list.h
typedef struct      s_list
{
    struct s_list   *next;
    void            *data;
}                   t_list;
$>
-e 

Assignment name  : ft_putnbr
Expected files   : ft_putnbr.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------


Write a function that displays the number entered as a parameter. The function
has to be able to display all possible values within an int type variable.


Your function must be declared as follows:

void    ft_putnbr(int nb);
-e 

Assignment name  : ft_split
Expected files   : ft_split.c
Allowed functions: malloc, free
--------------------------------------------------------------------------------

Write a function that takes a string, splits it into words, and returns them as
a NULL-terminated array of strings.

A "word" is defined as a part of a string delimited either by spaces/tabs/new
lines, or by the start/end of the string.

Your function must be declared as follows:

char    **ft_split(char *str);
-e 

Assignment name  : maff_revalpha
Expected files   : maff_revalpha.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays the alphabet in reverse, with even letters in
uppercase, and odd letters in lowercase, followed by a newline.

Example:

$> ./maff_revalpha | cat -e
zYxWvUtSrQpOnMlKjIhGfEdCbA$
-e 

Assignment name  : nth_char
Expected files   : nth_char.c
Allowed functions: write
--------------------------------------------------------------------------------
Write a function that takes two arguments: a string and a positive integer n.
The function should print every nth character from the string, starting from 
the nth position.

The input string will contain only printable ASCII characters.

If n is not a positive integer, print only a newline.
If the string is empty, print only a newline.
If n is greater than the string length, print only a newline.


Your function must be declared as follows:
		void print_nth_char(char *str, int n);

Examples:
int main(void)
{
    print_nth_char("ABCDEF", 2);    // prints "BDF\n"
    print_nth_char("PROGRAMMING", 3); // prints "OAI\n"
    print_nth_char("HELLOQUAD", 4);  // prints "LA\n"
    print_nth_char("ABC", 1);        // prints "ABC\n"
    print_nth_char("ABCDEF", 0);     // prints "\n"
    print_nth_char("", 2);           // prints "\n"
    return (0);
}
-e 

Assignment name  : pingpong
Expected files   : pingpong.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that takes an integer between 1 and 1000, and displays the appropriate output as in the example.

Your function must be declared as follows:

void	pingpong(int n);

If the number is a multiple of 3, it displays 'ping' followed by a newline.

If the number is a multiple of 5, it displays 'pong' followed by a newline.

If the number is both a multiple of 3 and a multiple of 5, it displays 'pingpong' followed by a newline.

If the number is not a multiple of 3 or 5, it displays the number followed by a newline.
Examples: 

int	main(void)
{
	pingpong(1); // 1
	pingpong(3); // ping
	pingpong(5); // pong
	pingpong(15); // pingpong
	pingpong(999); // ping
	pingpong(998); // 998
	return (0);
}-e 

Assignment name  : rle
Expected files   : rle.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single string as an argument and applies a basic
run-length encoding algorithm.

The input string contains only uppercase letters (Aâ€“Z),
with no character repeated more than 9 times consecutively.

The RLE algorithm compresses sequences of the same character by replacing them
with the number of repetitions followed by the character.

If the string is empty or if the number of arguments is not 1, display a \n.

If a character appears once, don't print the count (just the character).

Examples:

$> ./rle "AAABBC" | cat -e
3A2BC$
$> ./rle "ABCD" | cat -e
ABCD$
$> ./rle "" | cat -e
$
$> ./rle | cat -e
$
-e 

Assignment name  : title
Expected files   : title.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------


Write a program that takes one string and displays the characters with each first
letter of each word in uppercase followed by a newline (\n) on the standard output.

If the number of arguments is not 1, the program displays a newline (\n).

A "word" is defined as part of a string delimited by spaces, or by the start/end
of the string.


Exemples:

$>./title "pgjqwgjpwoqgejowgqw" | cat -e
Pgjqwgjpwoqgejowgqw$
$>./title 'no no no no!!!!!' | cat -e
No No No No!!!!!$
$>./title "one" "two" | cat -e
$
$>./title
$
$>

with the number of repetitions followed by the character.

If the string is empty or if the number of arguments is not 1, display a \n.

If a character appears once, don't print the count (just the character).

Examples:

$> ./rle "AAABBC" | cat -e
3A2BC$
$> ./rle "ABCD" | cat -e
ABCD$
$> ./rle "" | cat -e
$
$> ./rle | cat -e
$


