// Assignment name  : aff_g
// Expected files   : aff_g.c
// Version          : 1
// Allowed functions: write
// --------------------------------------------------------------------------------

// Write a program that takes a string, and displays the first 'g' character it
// encounters in it, followed by a newline. If there are no 'g' characters in the
// string, the program diplays 'g' followed by a newline. If the number of parameters is not
// 1, the program displays 'g' followed by a newline.

// Example:

// $> ./aff_g "abc" | cat -e
// g$
// $> ./aff_g 'RaInB0w d4Sh!' | cat -e
// g$
// $> ./aff_g 'ThE C4k3 Is a L|3' | cat -e
// g$
// $> ./aff_g 'C0cOnUt 0N th3 b3AcH' | cat -e
// g$
// $> ./aff_g | cat -e
// g$

// Assignment name  : maff_revalpha
// Expected files   : maff_revalpha.c
// Allowed functions: write
// --------------------------------------------------------------------------------

// Write a program that displays the alphabet in reverse, with even letters in
// uppercase, and odd letters in lowercase, followed by a newline.

// Example:

// $> ./maff_revalpha | cat -e
// zYxWvUtSrQpOnMlKjIhGfEdCbA$


// Assignment name  : sum_digits
// Expected files   : sum_digits.c
// Allowed functions: write
// --------------------------------------------------------------------------------

// Write a function that takes a string as parameter and returns the sum of all
// digits (0-9) it contains.

// Non-digit characters are ignored.
// if no digits are provided print 0.

// Your function must be declared as follows:

// int sum_digits(char *str);

// Examples:

// int main() {
//     sum_digits("abc123def456")  // returns 21
//     sum_digits("hello") // returns 0
//     sum_digits("42") // returns 6
//     sum_digits("") // returns 0
// }

Assignment name  : aff_k
Expected files   : aff_k.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'k' character it
encounters in it, followed by a newline. If there are no 'k' characters in the
string, the program diplays 'k' followed by a newline. If the number of parameters is not
1, the program displays 'k' followed by a newline.

Example:

$> ./aff_k "abc" | cat -e
k$
$> ./aff_k 'RaInB0w d4Sh!' | cat -e
k$
$> ./aff_k 'ThE C4k3 Is a L|3' | cat -e
k$
$> ./aff_k 'C0cOnUt 0N th3 b3AcH' | cat -e
k$
$> ./aff_k | cat -e
k$


Assignment name  : maff_revalpha
Expected files   : maff_revalpha.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays the alphabet in reverse, with even letters in
uppercase, and odd letters in lowercase, followed by a newline.

Example:

$> ./maff_revalpha | cat -e
zYxWvUtSrQpOnMlKjIhGfEdCbA$


Assignment name  : aff_k
Expected files   : aff_k.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'k' character it
encounters in it, followed by a newline. If there are no 'k' characters in the
string, the program diplays 'k' followed by a newline. If the number of parameters is not
1, the program displays 'k' followed by a newline.

Example:

$> ./aff_k "abc" | cat -e
k$
$> ./aff_k 'RaInB0w d4Sh!' | cat -e
k$
$> ./aff_k 'ThE C4k3 Is a L|3' | cat -e
k$
$> ./aff_k 'C0cOnUt 0N th3 b3AcH' | cat -e
k$
$> ./aff_k | cat -e
k$


Assignment name  : maff_revalpha
Expected files   : maff_revalpha.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays the alphabet in reverse, with even letters in
uppercase, and odd letters in lowercase, followed by a newline.

Example:

$> ./maff_revalpha | cat -e
zYxWvUtSrQpOnMlKjIhGfEdCbA$



Assignment name  : count_alen
Expected files   : count_alen.c
Allowed functions:
Version          : 1
--------------------------------------------------------------------------------

Write a function that return the length of a string until the first 'a' character
encourred.

If no 'a' is present in the string, return the total length of the string.

Your function must be declared as follows:

int count_alen(char *str);

Assignment name  : aff_last_param
Expected files   : aff_last_param.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes strings as arguments, and displays its last
argument followed by a newline.

If the number of arguments is less than 1, the program displays a newline.

Examples:

$> ./aff_last_param "Zelda" "is" "a" "boy" | cat -e
boy$
$> ./aff_last_param 'I read this on internet !' | cat -e
I read this on internet !$
$> ./aff_last_param | cat -e
$
Assignment name  : first_last_char
Expected files   : first_last_char.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string as argument and displays only the first
and last character of that string, followed by a newline.

If the string is empty or if the number of arguments is not 1, display only
a newline.

If the string has only one character, display that character twice.

Examples:

$> ./first_last_char "hello"
ho
$> ./first_last_char "world" | cat -e
wd$
$> ./first_last_char "a" | cat -e
aa$
$> ./first_last_char "" | cat -e
$
$> ./first_last_char | cat -e
$

Assignment name  : title
Expected files   : title.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------


Write a program that takes one string and displays the characters with each first
letter of each word in uppercase followed by a newline (\n) on the standard output.

If the number of arguments is not 1, the program displays a newline (\n).

A "word" is defined as part of a string delimited by spaces, or by the start/end
of the string.


Exemples:

$>./title "pgjqwgjpwoqgejowgqw" | cat -e
Pgjqwgjpwoqgejowgqw$
$>./title 'no no no no!!!!!' | cat -e
No No No No!!!!!$
$>./title "one" "two" | cat -e
$
$>./title
$
$>
Assignment name  : digit_sum
Expected files   : digit_sum.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single positive integer as a string argument and displays
the result of repeatedly summing its digits until only one digit remains to the
standard output, followed by a \n.

The input will always be a valid non-negative integer (no need to handle invalid
characters or negative values).

If the number of arguments is not 1, the program displays a \n.

Examples:
$>./digit_sum "0" | cat -e
0$
$>./digit_sum "1337" | cat -e
5$
$>./digit_sum "10" | cat -e
1$
$>./digit_sum "999" | cat -e
9$
$>./digit_sum "123" | cat -e
6$
$>./digit_sum "241" | cat -e
7$
$>./digit_sum "12" "34" "56" | cat -e
$
$>./digit_sum | cat -e
$

Assignment name  : nth_char
Expected files   : nth_char.c
Allowed functions: write
--------------------------------------------------------------------------------
Write a function that takes two arguments: a string and a positive integer n.
The function should print every nth character from the string, starting from
the nth position.

The input string will contain only printable ASCII characters.

If n is not a positive integer, print only a newline.
If the string is empty, print only a newline.
If n is greater than the string length, print only a newline.


Your function must be declared as follows:
        void print_nth_char(char *str, int n);

Examples:
int main(void)
{
    print_nth_char("ABCDEF", 2);    // prints "BDF\n"
    print_nth_char("PROGRAMMING", 3); // prints "OAI\n"
    print_nth_char("HELLOQUAD", 4);  // prints "LA\n"
    print_nth_char("ABC", 1);        // prints "ABC\n"
    print_nth_char("ABCDEF", 0);     // prints "\n"
    print_nth_char("", 2);           // prints "\n"
    return (0);
}



Assignment name  : maff_alpha
Expected files   : maff_alpha.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays the alphabet, with even letters in uppercase, and
odd letters in lowercase, followed by a newline.

Example:

$> ./maff_alpha | cat -e
aBcDeFgHiJkLmNoPqRsTuVwXyZ$


Assignment name  : aff_s
Expected files   : aff_s.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 's' character it
encounters in it, followed by a newline. If there are no 's' characters in the
string, the program diplays 's' followed by a newline. If the number of parameters is not
1, the program displays 's' followed by a newline.

Example:

$> ./aff_s "abc" | cat -e
s$
$> ./aff_s 'RaInB0w d4Sh!' | cat -e
s$
$> ./aff_s 'ThE C4k3 Is a L|3' | cat -e
s$
$> ./aff_s 'C0cOnUt 0N th3 b3AcH' | cat -e
s$
$> ./aff_s | cat -e
s$

Assignment name  : ft_putnbr
Expected files   : ft_putnbr.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------


Write a function that displays the number entered as a parameter. The function
has to be able to display all possible values within an int type variable.


Your function must be declared as follows:

void    ft_putnbr(int nb);


Assignment name  : ft_star
Expected files   : ft_star.c
Allowed functions: write
Version          : 1
--------------------------------------------------------------------------------

Write a program that displays seven star (*) followed by a newline (\n).

Example:

$>./ft_star
*******
$>./ft_star | cat -e
*******$
$>

Assignment name  : ft_putstr
Expected files   : ft_putstr.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that displays a string on the standard output.

The pointer passed to the function contains the address of the string's first
character.

Your function must be declared as follows:

void    ft_putstr(char *str);

Assignment name  : sum_digits
Expected files   : sum_digits.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that takes a string as parameter and returns the sum of all
digits (0-9) it contains.

Non-digit characters are ignored.
if no digits are provided print 0.

Your function must be declared as follows:

int sum_digits(char *str);

Examples:

int main() {
    sum_digits("abc123def456")  // returns 21
    sum_digits("hello") // returns 0
    sum_digits("42") // returns 6
    sum_digits("") // returns 0
}


Assignment name  : aff_w
Expected files   : aff_w.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'w' character it
encounters in it, followed by a newline. If there are no 'w' characters in the
string, the program diplays 'w' followed by a newline. If the number of parameters is not
1, the program displays 'w' followed by a newline.

Example:

$> ./aff_w "abc" | cat -e
w$
$> ./aff_w 'RaInB0w d4Sh!' | cat -e
w$
$> ./aff_w 'ThE C4k3 Is a L|3' | cat -e
w$
$> ./aff_w 'C0cOnUt 0N th3 b3AcH' | cat -e
w$
$> ./aff_w | cat -e
w$

Assignment name  : digit_sum
Expected files   : digit_sum.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single positive integer as a string argument and displays
the result of repeatedly summing its digits until only one digit remains to the
standard output, followed by a \n.

The input will always be a valid non-negative integer (no need to handle invalid
characters or negative values).

If the number of arguments is not 1, the program displays a \n.

Examples:
$>./digit_sum "0" | cat -e
0$
$>./digit_sum "1337" | cat -e
5$
$>./digit_sum "10" | cat -e
1$
$>./digit_sum "999" | cat -e
9$
$>./digit_sum "123" | cat -e
6$
$>./digit_sum "241" | cat -e
7$
$>./digit_sum "12" "34" "56" | cat -e
$
$>./digit_sum | cat -e
$

Assignment name  : occ_a
Expected files   : occ_a.c
Allowed functions:
Version          : 1
--------------------------------------------------------------------------------

Write a function that return the number of occurence of the character 'A'
in the given string.

For example:
Hello World
0

ZzAaa
1

Your function must be declared as follows:

int     occ_a(char *str);




Assignment name  : aff_t
Expected files   : aff_t.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 't' character it
encounters in it, followed by a newline. If there are no 't' characters in the
string, the program diplays 't' followed by a newline. If the number of parameters is not
1, the program displays 't' followed by a newline.

Example:

$> ./aff_t "abc" | cat -e
t$
$> ./aff_t 'RaInB0w d4Sh!' | cat -e
t$
$> ./aff_t 'ThE C4k3 Is a L|3' | cat -e
t$
$> ./aff_t 'C0cOnUt 0N th3 b3AcH' | cat -e
t$
$> ./aff_t | cat -e
t$


Assignment name  : even
Expected files   : even.c
Allowed functions: write
Version          : 1
--------------------------------------------------------------------------------

Write a program that display all even digits from 0 to 10, followed by a
newline '\n'.

Example:

$> ./even
0246810
$> ./even | cat -e
0246810$
$>


Assignment name  : ft_print_numbers
Expected files   : ft_print_numbers.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that displays all digits in ascending order.

Your function must be declared as follows:

void    ft_print_numbers(void);

Example:
$> ./ft_print_numbers | cat -e
0123456789$>


Assignment name  : nth_char
Expected files   : nth_char.c
Allowed functions: write
--------------------------------------------------------------------------------
Write a function that takes two arguments: a string and a positive integer n.
The function should print every nth character from the string, starting from
the nth position.

The input string will contain only printable ASCII characters.

If n is not a positive integer, print only a newline.
If the string is empty, print only a newline.
If n is greater than the string length, print only a newline.


Your function must be declared as follows:
        void print_nth_char(char *str, int n);

Examples:
int main(void)
{
    print_nth_char("ABCDEF", 2);    // prints "BDF\n"
    print_nth_char("PROGRAMMING", 3); // prints "OAI\n"
    print_nth_char("HELLOQUAD", 4);  // prints "LA\n"
    print_nth_char("ABC", 1);        // prints "ABC\n"
    print_nth_char("ABCDEF", 0);     // prints "\n"
    print_nth_char("", 2);           // prints "\n"
    return (0);
}

Assignment name  : ft_strlen
Expected files   : ft_strlen.c
Allowed functions:
--------------------------------------------------------------------------------

Write a function that returns the length of a string.

Your function must be declared as follows:

int ft_strlen(char *str);



Assignment name  : base16
Expected files   : base16.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single decimal number as argument and display its
base 16 representation to the standard output, followed by a \n.

The input will always be a valid positive integer or zero.
You must not handle invalid inputs (negative numbers, non-numeric characters).

If the number of arguments is not 1, the program displays a \n.

Base 16 uses the following symbols:
0 = 0, 1 = 1, 2 = 2, 3 = 3, 4 = 4, 5 = 5, 6 = 6, 7 = 7, 8 = 8, 9 = 9,
A = 10, B = 11, C = 12, D = 13, E = 14, F = 15

Base 16 conversion rules:
- Each position represents a power of 16 (rightmost is 16^0, next is 16^1, etc.)
- To convert from decimal: repeatedly divide by 16 and use remainders as digits
- Convert each remainder to its corresponding symbol (0-9 for 0-9, A-F for 10-15)

Examples:
$>./base16 "0" | cat -e
0$
$>./base16 "10" | cat -e
A$
$>./base16 "15" | cat -e
F$
$>./base16 "16" | cat -e
10$
$>./base16 "255" | cat -e
FF$
$>./base16 "256" | cat -e
100$
$>./base16 "3735928559" | cat -e
DEADBEEF$
$>./base16 | cat -e
$

Assignment name  : occ_a
Expected files   : occ_a.c
Allowed functions:
Version          : 1
--------------------------------------------------------------------------------

Write a function that return the number of occurence of the character 'A'
in the given string.

For example:
Hello World
0

ZzAaa
1

Your function must be declared as follows:

int     occ_a(char *str);

Assignment name  : is_palindrome
Expected files   : is_palindrome.c
Version          : 1.1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes one string, if the string is a palindrome displays it
followed by a newline (\n).

If the number of arguments is not 1 or the string is not a palindrome, the program
displays a newline (\n).

A palindrome is a word, phrase, or sequence that reads the same backwards as forwards.

Exemples:

$>./is_palindrome "aaaabbbbbbbbaaaa" | cat -e
aaaabbbbbbbbaaaa$
$>./is_palindrome "abcdeedcbb" | cat -e
$
$>./is_palindrome "one" "two" | cat -e
$
$>./is_palindrome
$
$>

Assignment name  : first_last_char
Expected files   : first_last_char.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string as argument and displays only the first
and last character of that string, followed by a newline.

If the string is empty or if the number of arguments is not 1, display only
a newline.

If the string has only one character, display that character twice.

Examples:

$> ./first_last_char "hello"
ho
$> ./first_last_char "world" | cat -e
wd$
$> ./first_last_char "a" | cat -e
aa$
$> ./first_last_char "" | cat -e
$
$> ./first_last_char | cat -e
$

Assignment name  : aff_last_param
Expected files   : aff_last_param.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes strings as arguments, and displays its last
argument followed by a newline.

If the number of arguments is less than 1, the program displays a newline.

Examples:

$> ./aff_last_param "Zelda" "is" "a" "boy" | cat -e
boy$
$> ./aff_last_param 'I read this on internet !' | cat -e
I read this on internet !$
$> ./aff_last_param | cat -e
$


Last login: Sat Aug  9 07:22:55 on console
log 42 wizzard is up to date 
mohchaib@c2r11p4 ~ % login
login: exam
Password:
Last login: Fri Aug  1 14:56:28 on console
c2r11p4:~ exam$ cd sub
-sh: cd: sub: No such file or directory
c2r11p4:~ exam$ ls
Downloads	Library		docs
c2r11p4:~ exam$ 
  [Restored Aug 9, 2025 at 7:31:01 AM]
Last login: Sat Aug  9 07:30:39 on console
 42 wizzard is up to date 
mohchaib@c2r4p5 ~ % login
login: exam
Password:
Login incorrect
login: exam
Password:
Last login: Fri Aug  8 12:04:01 on ttys003
c2r4p5:~ exam$ cd subjects/
c2r4p5:subjects exam$ ls
aff_f		digit_sum	nth_char	occ_z		write_string
c2r4p5:subjects exam$ 
c2r4p5:subjects exam$ ls
aff_f		digit_sum	nth_char	occ_z		write_string
c2r4p5:subjects exam$ cd occ_z/
c2r4p5:occ_z exam$ ls
subject.en.txt	subject.fr.txt	subject.ja.txt	subject.tr.txt
subject.es.txt	subject.hy.txt	subject.ko.txt
c2r4p5:occ_z exam$ vim subject.en.txt 
c2r4p5:occ_z exam$ cd ..
c2r4p5:subjects exam$ ls
aff_f		digit_sum	nth_char	occ_z		write_string
c2r4p5:subjects exam$ cd write_string/
c2r4p5:write_string exam$ ls
subject.en.txt	subject.es.txt	subject.fr.txt	subject.hy.txt	subject.ja.txt	subject.ko.txt	subject.tr.txt
c2r4p5:write_string exam$ cd subject.en.txt 
-sh: cd: subject.en.txt: Not a directory
c2r4p5:write_string exam$ vim subject.en.txt 
c2r4p5:write_string exam$ cd ..
c2r4p5:subjects exam$ ls
aff_f		digit_sum	nth_char	occ_z		write_string
c2r4p5:subjects exam$ cd ..
c2r4p5:~ exam$ 



  [Restored Aug 9, 2025 at 7:34:17 AM]
Last login: Sat Aug  9 07:34:06 on console
 42 wizzard is up to date 
mohchaib@c2r4p3 ~ % login
login: exam
Password:
Last login: Fri Aug  8 11:15:32 on ttys004
c2r4p3:~ exam$ ls
Desktop		Downloads	docs		subjects
Documents	Library		private		traces
c2r4p3:~ exam$ cd subjects/
c2r4p3:subjects exam$ 
c2r4p3:subjects exam$ ls
aff_f		base16		even		ft_putnbr	nth_char
aff_last_param	digit_sum	first_last_char	is_palindrome	occ_a
c2r4p3:subjects exam$ cd base16/
c2r4p3:base16 exam$ vim subject.en.txt 
c2r4p3:base16 exam$ cd ..
c2r4p3:subjects exam$ ls
aff_f		base16		even		ft_putnbr	nth_char
aff_last_param	digit_sum	first_last_char	is_palindrome	occ_a
c2r4p3:subjects exam$ cd occ_a/
c2r4p3:occ_a exam$ vim subject.en.txt 
c2r4p3:occ_a exam$ cd ..
c2r4p3:subjects exam$ ls
aff_f		base16		even		ft_putnbr	nth_char
aff_last_param	digit_sum	first_last_char	is_palindrome	occ_a
c2r4p3:subjects exam$ 








c2r4p3:subjects exam$ ls
aff_f		base16		even		ft_putnbr	nth_char
aff_last_param	digit_sum	first_last_char	is_palindrome	occ_a
c2r4p3:subjects exam$ cd is_palindrome/
c2r4p3:is_palindrome exam$ vim subject.en.txt 
c2r4p3:is_palindrome exam$ cd ..
c2r4p3:subjects exam$ ls
aff_f		base16		even		ft_putnbr	nth_char
aff_last_param	digit_sum	first_last_char	is_palindrome	occ_a
c2r4p3:subjects exam$ cd first_last_char/
c2r4p3:first_last_char exam$ cd ..
c2r4p3:subjects exam$ cd first_last_char/
c2r4p3:first_last_char exam$ vim subject.en.txt 
c2r4p3:first_last_char exam$ cd ..
c2r4p3:subjects exam$ ls
aff_f		base16		even		ft_putnbr	nth_char
aff_last_param	digit_sum	first_last_char	is_palindrome	occ_a
c2r4p3:subjects exam$ cd aff_last_param/
c2r4p3:aff_last_param exam$ vim subject.en.txt 
c2r4p3:aff_last_param exam$ cd ..
c2r4p3:subjects exam$ ls 
aff_f		base16		even		ft_putnbr	nth_char
aff_last_param	digit_sum	first_last_char	is_palindrome	occ_a
c2r4p3:subjects exam$ 



















  [Restored Aug 9, 2025 at 7:38:13 AM]
Last login: Sat Aug  9 07:37:40 on console
login
 42 wizzard is up to date 
^L%                                                                             mohchaib@c2r4p1 ~ % login
login: exam
Password:
Last login: Fri Aug  8 10:23:17 on ttys005
c2r4p1:~ exam$ ls
Desktop		Downloads	docs		subjects
Documents	Library		private		traces
c2r4p1:~ exam$ cd subjects/
c2r4p1:~ exam$ cd subjects/
c2r4p1:subjects exam$ ls
aff_k		maff_alpha	nth_char	occ_a
c2r4p1:subjects exam$ 




















  [Restored Aug 9, 2025 at 7:40:06 AM]
Last login: Sat Aug  9 07:39:42 on console
l 42 wizzard is up to date 
mohchaib@c2r3p9 ~ % login
login: exam
Password:
Last login: Fri Aug  8 10:12:23 on ttys004
c2r3p9:~ exam$ cd subjects/
c2r3p9:subjects exam$ ls
aff_q	even
c2r3p9:subjects exam$ 
  [Restored Aug 9, 2025 at 7:41:56 AM]
Last login: Sat Aug  9 07:41:06 on console
 42 wizzard is up to date 
mohchaib@c2r3p7 ~ % login
login: exam
Password:
Last login: Fri Aug  8 10:00:16 on ttys000
c2r3p7:~ exam$ 
c2r3p7:~ exam$ ls
Desktop		Downloads	docs		subjects
Documents	Library		private		traces
c2r3p7:~ exam$ cd subjects/
c2r3p7:subjects exam$ ls
aff_c		base16		digit_sum	first_last_char	ft_putnbr	nth_char	title
aff_last_param	count_alen	even		ft_itoa		ft_split	sort_list
c2r3p7:subjects exam$ cd ft_itoa/
c2r3p7:ft_itoa exam$ ls
subject.en.txt	subject.fr.txt	subject.it.txt	subject.ko.txt	subject.tr.txt
subject.es.txt	subject.hy.txt	subject.ja.txt	subject.pt.txt
c2r3p7:ft_itoa exam$ vim subject.en.txt 
c2r3p7:ft_itoa exam$ cd ..
c2r3p7:subjects exam$ cd ft_split/
c2r3p7:ft_split exam$ vim subject.e  
subject.en.txt  subject.es.txt  
c2r3p7:ft_split exam$ vim subject.e
subject.en.txt  subject.es.txt  
c2r3p7:ft_split exam$ vim subject.en.txt 
c2r3p7:ft_split exam$ cd ..
c2r3p7:subjects exam$ ls
aff_c		base16		digit_sum	first_last_char	ft_putnbr	nth_char	title
aff_last_param	count_alen	even		ft_itoa		ft_split	sort_list
c2r3p7:subjects exam$ cd sort_list/
c2r3p7:sort_list exam$ vim subject.en.txt 
c2r3p7:sort_list exam$ cd ..
c2r3p7:subjects exam$ lls
-sh: lls: command not found
c2r3p7:subjects exam$ ls
aff_c		base16		digit_sum	first_last_char	ft_putnbr	nth_char	title
aff_last_param	count_alen	even		ft_itoa		ft_split	sort_list
c2r3p7:subjects exam$ 















  [Restored Aug 9, 2025 at 7:46:03 AM]
Last login: Sat Aug  9 07:46:01 on console
 42 wizzard is up to date 
mohchaib@c2r3p7 ~ % login
login: exam
Password:
Last login: Sat Aug  9 07:42:01 on ttys000
c2r3p7:~ exam$ ls
Desktop		Downloads	docs		subjects
Documents	Library		private		traces
c2r3p7:~ exam$ cd subjects/
c2r3p7:~ exam$ cd subjects/ls
-sh: cd: subjects/ls: No such file or directory
c2r3p7:~ exam$ cd ..
c2r3p7:/ exam$ ls
Applications	Volumes		dev		gucci.mp3	private		tmp
Library		bin		etc		iSCSI		root		usr
System		cores		exam		nfs		sbin		var
Users		default.profraw	goinfre		opt		sgoinfre
c2r3p7:/ exam$ cd -
/exam
c2r3p7:~ exam$ ls
Desktop		Downloads	docs		subjects
Documents	Library		private		traces
c2r3p7:~ exam$ cd subjects/
c2r3p7:subjects exam$ ks
-sh: ks: command not found
c2r3p7:subjects exam$ ls
aff_c		base16		digit_sum	first_last_char	ft_putnbr	nth_char	title
aff_last_param	count_alen	even		ft_itoa		ft_split	sort_list
c2r3p7:subjects exam$ cd ft_itoa/
c2r3p7:ft_itoa exam$ ls
subject.en.txt	subject.fr.txt	subject.it.txt	subject.ko.txt	subject.tr.txt
subject.es.txt	subject.hy.txt	subject.ja.txt	subject.pt.txt
c2r3p7:ft_itoa exam$ cd ..
c2r3p7:subjects exam$ ls
aff_c		base16		digit_sum	first_last_char	ft_putnbr	nth_char	title
aff_last_param	count_alen	even		ft_itoa		ft_split	sort_list
c2r3p7:subjects exam$ cd ..
c2r3p7:~ exam$ ls
Desktop		Downloads	docs		subjects
Documents	Library		private		traces
c2r3p7:~ exam$ #!/bin/bash
c2r3p7:~ exam$ mkdir -p ~/Desktop/notes
c2r3p7:~ exam$ cd ~/subjects || exit
c2r3p7:subjects exam$ 
c2r3p7:subjects exam$ for dir in */; do
>     if [[ -f "${dir}subject.en.txt" ]]; then
>         cp "${dir}subject.en.txt" ~/Desktop/notes/"${dir%/}.txt"
>     fi
> done
c2r3p7:subjects exam$ 
c2r3p7:subjects exam$ ls
aff_c		base16		digit_sum	first_last_char	ft_putnbr	nth_char	title
aff_last_param	count_alen	even		ft_itoa		ft_split	sort_list
c2r3p7:subjects exam$ cd ..
c2r3p7:~ exam$ ls
Desktop		Downloads	docs		subjects
Documents	Library		private		traces
c2r3p7:~ exam$ cdcd Desktop/
-sh: cdcd: command not found
c2r3p7:~ exam$ cd Desktop/
c2r3p7:Desktop exam$ ls
notes
c2r3p7:Desktop exam$ cat notes/
cat: notes/: Is a directory
c2r3p7:Desktop exam$ cd notes/
c2r3p7:notes exam$ ls
aff_c.txt		count_alen.txt		first_last_char.txt	ft_split.txt		title.txt
aff_last_param.txt	digit_sum.txt		ft_itoa.txt		nth_char.txt
base16.txt		even.txt		ft_putnbr.txt		sort_list.txt
c2r3p7:notes exam$ cat *
Assignment name  : aff_c
Expected files   : aff_c.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'c' character it
encounters in it, followed by a newline. If there are no 'c' characters in the
string, the program diplays 'c' followed by a newline. If the number of parameters is not
1, the program displays 'c' followed by a newline.

Example:

$> ./aff_c "abc" | cat -e
c$
$> ./aff_c 'RaInB0w d4Sh!' | cat -e
c$
$> ./aff_c 'ThE C4k3 Is a L|3' | cat -e
c$
$> ./aff_c 'C0cOnUt 0N th3 b3AcH' | cat -e
c$
$> ./aff_c | cat -e
c$
    Assignment name  : aff_last_param
Expected files   : aff_last_param.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes strings as arguments, and displays its last
argument followed by a newline.

If the number of arguments is less than 1, the program displays a newline.

Examples:

$> ./aff_last_param "Zelda" "is" "a" "boy" | cat -e
boy$
$> ./aff_last_param 'I read this on internet !' | cat -e
I read this on internet !$
$> ./aff_last_param | cat -e
$
Assignment name  : base16
Expected files   : base16.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single decimal number as argument and display its
base 16 representation to the standard output, followed by a \n.

The input will always be a valid positive integer or zero.
You must not handle invalid inputs (negative numbers, non-numeric characters).

If the number of arguments is not 1, the program displays a \n.

Base 16 uses the following symbols:
0 = 0, 1 = 1, 2 = 2, 3 = 3, 4 = 4, 5 = 5, 6 = 6, 7 = 7, 8 = 8, 9 = 9,
A = 10, B = 11, C = 12, D = 13, E = 14, F = 15

Base 16 conversion rules:
- Each position represents a power of 16 (rightmost is 16^0, next is 16^1, etc.)
- To convert from decimal: repeatedly divide by 16 and use remainders as digits
- Convert each remainder to its corresponding symbol (0-9 for 0-9, A-F for 10-15)

Examples:
$>./base16 "0" | cat -e
0$
$>./base16 "10" | cat -e
A$
$>./base16 "15" | cat -e
F$
$>./base16 "16" | cat -e
10$
$>./base16 "255" | cat -e
FF$
$>./base16 "256" | cat -e
100$
$>./base16 "3735928559" | cat -e
DEADBEEF$
$>./base16 | cat -e
$Assignment name  : count_alen
Expected files   : count_alen.c
Allowed functions:
Version          : 1
--------------------------------------------------------------------------------

Write a function that return the length of a string until the first 'a' character
encourred.

If no 'a' is present in the string, return the total length of the string.

Your function must be declared as follows:

int count_alen(char *str);

Assignment name  : digit_sum
Expected files   : digit_sum.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single positive integer as a string argument and displays
the result of repeatedly summing its digits until only one digit remains to the
standard output, followed by a \n.

The input will always be a valid non-negative integer (no need to handle invalid
characters or negative values).

If the number of arguments is not 1, the program displays a \n.

Examples:
$>./digit_sum "0" | cat -e
0$
$>./digit_sum "1337" | cat -e
5$
$>./digit_sum "10" | cat -e
1$
$>./digit_sum "999" | cat -e
9$
$>./digit_sum "123" | cat -e
6$
$>./digit_sum "241" | cat -e
7$
$>./digit_sum "12" "34" "56" | cat -e
$
$>./digit_sum | cat -e
$
Assignment name  : even
Expected files   : even.c
Allowed functions: write
Version          : 1
--------------------------------------------------------------------------------

Write a program that display all even digits from 0 to 10, followed by a
newline '\n'.

Example:

$> ./even
0246810
$> ./even | cat -e
0246810$
$>
Assignment name  : first_last_char
Expected files   : first_last_char.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string as argument and displays only the first
and last character of that string, followed by a newline.

If the string is empty or if the number of arguments is not 1, display only
a newline.

If the string has only one character, display that character twice.

Examples:

$> ./first_last_char "hello"
ho
$> ./first_last_char "world" | cat -e
wd$
$> ./first_last_char "a" | cat -e
aa$
$> ./first_last_char "" | cat -e
$
$> ./first_last_char | cat -e
$
Assignment name  : ft_itoa
Expected files   : ft_itoa.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write a function that takes an int and converts it to a null-terminated string.
The function returns the result in a char array that you must allocate.

Your function must be declared as follows:

char	*ft_itoa(int nbr);
Assignment name  : ft_putnbr
Expected files   : ft_putnbr.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------


Write a function that displays the number entered as a parameter. The function
has to be able to display all possible values within an int type variable.


Your function must be declared as follows:

void    ft_putnbr(int nb);
Assignment name  : ft_split
Expected files   : ft_split.c
Allowed functions: malloc, free
--------------------------------------------------------------------------------

Write a function that takes a string, splits it into words, and returns them as
a NULL-terminated array of strings.

A "word" is defined as a part of a string delimited either by spaces/tabs/new
lines, or by the start/end of the string.

Your function must be declared as follows:

char    **ft_split(char *str);
Assignment name  : nth_char
Expected files   : nth_char.c
Allowed functions: write
--------------------------------------------------------------------------------
Write a function that takes two arguments: a string and a positive integer n.
The function should print every nth character from the string, starting from 
the nth position.

The input string will contain only printable ASCII characters.

If n is not a positive integer, print only a newline.
If the string is empty, print only a newline.
If n is greater than the string length, print only a newline.


Your function must be declared as follows:
		void print_nth_char(char *str, int n);

Examples:
int main(void)
{
    print_nth_char("ABCDEF", 2);    // prints "BDF\n"
    print_nth_char("PROGRAMMING", 3); // prints "OAI\n"
    print_nth_char("HELLOQUAD", 4);  // prints "LA\n"
    print_nth_char("ABC", 1);        // prints "ABC\n"
    print_nth_char("ABCDEF", 0);     // prints "\n"
    print_nth_char("", 2);           // prints "\n"
    return (0);
}
Assignment name  : sort_list
Expected files   : sort_list.c
Allowed functions: 
--------------------------------------------------------------------------------

Write the following function:

t_list  *sort_list(t_list* lst, int (*cmp)(int, int));

This function must sort the list given as a parameter, using the function 
pointer cmp to select the order to apply, and returns a pointer to the 
first element of the sorted list.

Duplications must remain.

Inputs will always be consistent.

You must use the type t_list described in the file list.h 
that is provided to you. You must include that file 
(#include "list.h"), but you must not turn it in. We will use our own 
to compile your assignment.

Functions passed as cmp will always return a value different from 
0 if a and b are in the right order, 0 otherwise.

For example, the following function used as cmp will sort the list 
in ascending order:

int ascending(int a, int b)
{
    return (a <= b);
}
Assignment name  : title
Expected files   : title.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------


Write a program that takes one string and displays the characters with each first
letter of each word in uppercase followed by a newline (\n) on the standard output.

If the number of arguments is not 1, the program displays a newline (\n).

A "word" is defined as part of a string delimited by spaces, or by the start/end
of the string.


Exemples:

$>./title "pgjqwgjpwoqgejowgqw" | cat -e
Pgjqwgjpwoqgejowgqw$
$>./title 'no no no no!!!!!' | cat -e
No No No No!!!!!$
$>./title "one" "two" | cat -e
$
$>./title
$
$>

