// Assignment name  : aff_g
// Expected files   : aff_g.c
// Version          : 1
// Allowed functions: write
// --------------------------------------------------------------------------------

// Write a program that takes a string, and displays the first 'g' character it
// encounters in it, followed by a newline. If there are no 'g' characters in the
// string, the program diplays 'g' followed by a newline. If the number of parameters is not
// 1, the program displays 'g' followed by a newline.

// Example:

// $> ./aff_g "abc" | cat -e
// g$
// $> ./aff_g 'RaInB0w d4Sh!' | cat -e
// g$
// $> ./aff_g 'ThE C4k3 Is a L|3' | cat -e
// g$
// $> ./aff_g 'C0cOnUt 0N th3 b3AcH' | cat -e
// g$
// $> ./aff_g | cat -e
// g$

// Assignment name  : maff_revalpha
// Expected files   : maff_revalpha.c
// Allowed functions: write
// --------------------------------------------------------------------------------

// Write a program that displays the alphabet in reverse, with even letters in
// uppercase, and odd letters in lowercase, followed by a newline.

// Example:

// $> ./maff_revalpha | cat -e
// zYxWvUtSrQpOnMlKjIhGfEdCbA$


// Assignment name  : sum_digits
// Expected files   : sum_digits.c
// Allowed functions: write
// --------------------------------------------------------------------------------

// Write a function that takes a string as parameter and returns the sum of all
// digits (0-9) it contains.

// Non-digit characters are ignored.
// if no digits are provided print 0.

// Your function must be declared as follows:

// int sum_digits(char *str);

// Examples:

// int main() {
//     sum_digits("abc123def456")  // returns 21
//     sum_digits("hello") // returns 0
//     sum_digits("42") // returns 6
//     sum_digits("") // returns 0
// }

Assignment name  : aff_k
Expected files   : aff_k.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'k' character it
encounters in it, followed by a newline. If there are no 'k' characters in the
string, the program diplays 'k' followed by a newline. If the number of parameters is not
1, the program displays 'k' followed by a newline.

Example:

$> ./aff_k "abc" | cat -e
k$
$> ./aff_k 'RaInB0w d4Sh!' | cat -e
k$
$> ./aff_k 'ThE C4k3 Is a L|3' | cat -e
k$
$> ./aff_k 'C0cOnUt 0N th3 b3AcH' | cat -e
k$
$> ./aff_k | cat -e
k$


Assignment name  : maff_revalpha
Expected files   : maff_revalpha.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays the alphabet in reverse, with even letters in
uppercase, and odd letters in lowercase, followed by a newline.

Example:

$> ./maff_revalpha | cat -e
zYxWvUtSrQpOnMlKjIhGfEdCbA$


Assignment name  : aff_k
Expected files   : aff_k.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'k' character it
encounters in it, followed by a newline. If there are no 'k' characters in the
string, the program diplays 'k' followed by a newline. If the number of parameters is not
1, the program displays 'k' followed by a newline.

Example:

$> ./aff_k "abc" | cat -e
k$
$> ./aff_k 'RaInB0w d4Sh!' | cat -e
k$
$> ./aff_k 'ThE C4k3 Is a L|3' | cat -e
k$
$> ./aff_k 'C0cOnUt 0N th3 b3AcH' | cat -e
k$
$> ./aff_k | cat -e
k$


Assignment name  : maff_revalpha
Expected files   : maff_revalpha.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays the alphabet in reverse, with even letters in
uppercase, and odd letters in lowercase, followed by a newline.

Example:

$> ./maff_revalpha | cat -e
zYxWvUtSrQpOnMlKjIhGfEdCbA$



Assignment name  : count_alen
Expected files   : count_alen.c
Allowed functions:
Version          : 1
--------------------------------------------------------------------------------

Write a function that return the length of a string until the first 'a' character
encourred.

If no 'a' is present in the string, return the total length of the string.

Your function must be declared as follows:

int count_alen(char *str);

Assignment name  : aff_last_param
Expected files   : aff_last_param.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes strings as arguments, and displays its last
argument followed by a newline.

If the number of arguments is less than 1, the program displays a newline.

Examples:

$> ./aff_last_param "Zelda" "is" "a" "boy" | cat -e
boy$
$> ./aff_last_param 'I read this on internet !' | cat -e
I read this on internet !$
$> ./aff_last_param | cat -e
$
Assignment name  : first_last_char
Expected files   : first_last_char.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string as argument and displays only the first
and last character of that string, followed by a newline.

If the string is empty or if the number of arguments is not 1, display only
a newline.

If the string has only one character, display that character twice.

Examples:

$> ./first_last_char "hello"
ho
$> ./first_last_char "world" | cat -e
wd$
$> ./first_last_char "a" | cat -e
aa$
$> ./first_last_char "" | cat -e
$
$> ./first_last_char | cat -e
$

Assignment name  : title
Expected files   : title.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------


Write a program that takes one string and displays the characters with each first
letter of each word in uppercase followed by a newline (\n) on the standard output.

If the number of arguments is not 1, the program displays a newline (\n).

A "word" is defined as part of a string delimited by spaces, or by the start/end
of the string.


Exemples:

$>./title "pgjqwgjpwoqgejowgqw" | cat -e
Pgjqwgjpwoqgejowgqw$
$>./title 'no no no no!!!!!' | cat -e
No No No No!!!!!$
$>./title "one" "two" | cat -e
$
$>./title
$
$>
Assignment name  : digit_sum
Expected files   : digit_sum.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single positive integer as a string argument and displays
the result of repeatedly summing its digits until only one digit remains to the
standard output, followed by a \n.

The input will always be a valid non-negative integer (no need to handle invalid
characters or negative values).

If the number of arguments is not 1, the program displays a \n.

Examples:
$>./digit_sum "0" | cat -e
0$
$>./digit_sum "1337" | cat -e
5$
$>./digit_sum "10" | cat -e
1$
$>./digit_sum "999" | cat -e
9$
$>./digit_sum "123" | cat -e
6$
$>./digit_sum "241" | cat -e
7$
$>./digit_sum "12" "34" "56" | cat -e
$
$>./digit_sum | cat -e
$

Assignment name  : nth_char
Expected files   : nth_char.c
Allowed functions: write
--------------------------------------------------------------------------------
Write a function that takes two arguments: a string and a positive integer n.
The function should print every nth character from the string, starting from
the nth position.

The input string will contain only printable ASCII characters.

If n is not a positive integer, print only a newline.
If the string is empty, print only a newline.
If n is greater than the string length, print only a newline.


Your function must be declared as follows:
        void print_nth_char(char *str, int n);

Examples:
int main(void)
{
    print_nth_char("ABCDEF", 2);    // prints "BDF\n"
    print_nth_char("PROGRAMMING", 3); // prints "OAI\n"
    print_nth_char("HELLOQUAD", 4);  // prints "LA\n"
    print_nth_char("ABC", 1);        // prints "ABC\n"
    print_nth_char("ABCDEF", 0);     // prints "\n"
    print_nth_char("", 2);           // prints "\n"
    return (0);
}



Assignment name  : maff_alpha
Expected files   : maff_alpha.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays the alphabet, with even letters in uppercase, and
odd letters in lowercase, followed by a newline.

Example:

$> ./maff_alpha | cat -e
aBcDeFgHiJkLmNoPqRsTuVwXyZ$


Assignment name  : aff_s
Expected files   : aff_s.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 's' character it
encounters in it, followed by a newline. If there are no 's' characters in the
string, the program diplays 's' followed by a newline. If the number of parameters is not
1, the program displays 's' followed by a newline.

Example:

$> ./aff_s "abc" | cat -e
s$
$> ./aff_s 'RaInB0w d4Sh!' | cat -e
s$
$> ./aff_s 'ThE C4k3 Is a L|3' | cat -e
s$
$> ./aff_s 'C0cOnUt 0N th3 b3AcH' | cat -e
s$
$> ./aff_s | cat -e
s$

Assignment name  : ft_putnbr
Expected files   : ft_putnbr.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------


Write a function that displays the number entered as a parameter. The function
has to be able to display all possible values within an int type variable.


Your function must be declared as follows:

void    ft_putnbr(int nb);


Assignment name  : ft_star
Expected files   : ft_star.c
Allowed functions: write
Version          : 1
--------------------------------------------------------------------------------

Write a program that displays seven star (*) followed by a newline (\n).

Example:

$>./ft_star
*******
$>./ft_star | cat -e
*******$
$>

Assignment name  : ft_putstr
Expected files   : ft_putstr.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that displays a string on the standard output.

The pointer passed to the function contains the address of the string's first
character.

Your function must be declared as follows:

void    ft_putstr(char *str);

Assignment name  : sum_digits
Expected files   : sum_digits.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that takes a string as parameter and returns the sum of all
digits (0-9) it contains.

Non-digit characters are ignored.
if no digits are provided print 0.

Your function must be declared as follows:

int sum_digits(char *str);

Examples:

int main() {
    sum_digits("abc123def456")  // returns 21
    sum_digits("hello") // returns 0
    sum_digits("42") // returns 6
    sum_digits("") // returns 0
}


Assignment name  : aff_w
Expected files   : aff_w.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'w' character it
encounters in it, followed by a newline. If there are no 'w' characters in the
string, the program diplays 'w' followed by a newline. If the number of parameters is not
1, the program displays 'w' followed by a newline.

Example:

$> ./aff_w "abc" | cat -e
w$
$> ./aff_w 'RaInB0w d4Sh!' | cat -e
w$
$> ./aff_w 'ThE C4k3 Is a L|3' | cat -e
w$
$> ./aff_w 'C0cOnUt 0N th3 b3AcH' | cat -e
w$
$> ./aff_w | cat -e
w$

Assignment name  : digit_sum
Expected files   : digit_sum.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a single positive integer as a string argument and displays
the result of repeatedly summing its digits until only one digit remains to the
standard output, followed by a \n.

The input will always be a valid non-negative integer (no need to handle invalid
characters or negative values).

If the number of arguments is not 1, the program displays a \n.

Examples:
$>./digit_sum "0" | cat -e
0$
$>./digit_sum "1337" | cat -e
5$
$>./digit_sum "10" | cat -e
1$
$>./digit_sum "999" | cat -e
9$
$>./digit_sum "123" | cat -e
6$
$>./digit_sum "241" | cat -e
7$
$>./digit_sum "12" "34" "56" | cat -e
$
$>./digit_sum | cat -e
$

Assignment name  : occ_a
Expected files   : occ_a.c
Allowed functions:
Version          : 1
--------------------------------------------------------------------------------

Write a function that return the number of occurence of the character 'A'
in the given string.

For example:
Hello World
0

ZzAaa
1

Your function must be declared as follows:

int     occ_a(char *str);




Assignment name  : aff_t
Expected files   : aff_t.c
Version          : 1
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 't' character it
encounters in it, followed by a newline. If there are no 't' characters in the
string, the program diplays 't' followed by a newline. If the number of parameters is not
1, the program displays 't' followed by a newline.

Example:

$> ./aff_t "abc" | cat -e
t$
$> ./aff_t 'RaInB0w d4Sh!' | cat -e
t$
$> ./aff_t 'ThE C4k3 Is a L|3' | cat -e
t$
$> ./aff_t 'C0cOnUt 0N th3 b3AcH' | cat -e
t$
$> ./aff_t | cat -e
t$




